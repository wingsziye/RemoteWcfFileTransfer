//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteClient.Inferstructure.WCF.RemoteOnlineService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.RemoteOnlineService.IRemoteOnlineService", CallbackContract=typeof(RemoteClient.Inferstructure.WCF.RemoteOnlineService.IRemoteOnlineServiceCallback))]
    public interface IRemoteOnlineService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/GetOnlineUsers", ReplyAction="http://tempuri.org/IRemoteOnlineService/GetOnlineUsersResponse")]
        System.Collections.Generic.List<Remote.Infrastructure.DataContracts.ClientToken> GetOnlineUsers(Remote.Infrastructure.DataContracts.ClientToken whoIam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/GetOnlineUsers", ReplyAction="http://tempuri.org/IRemoteOnlineService/GetOnlineUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Remote.Infrastructure.DataContracts.ClientToken>> GetOnlineUsersAsync(Remote.Infrastructure.DataContracts.ClientToken whoIam);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteOnlineService/UpdateWhoIam")]
        void UpdateWhoIam(Remote.Infrastructure.DataContracts.ClientToken whoIam);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteOnlineService/UpdateWhoIam")]
        System.Threading.Tasks.Task UpdateWhoIamAsync(Remote.Infrastructure.DataContracts.ClientToken whoIam);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteOnlineService/UpdateTokenOnlineState")]
        void UpdateTokenOnlineState(Remote.Infrastructure.DataContracts.ClientToken token);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteOnlineService/UpdateTokenOnlineState")]
        System.Threading.Tasks.Task UpdateTokenOnlineStateAsync(Remote.Infrastructure.DataContracts.ClientToken token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/GetExistGroupName", ReplyAction="http://tempuri.org/IRemoteOnlineService/GetExistGroupNameResponse")]
        System.Collections.Generic.List<string> GetExistGroupName(Remote.Infrastructure.DataContracts.ClientToken whoIam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/GetExistGroupName", ReplyAction="http://tempuri.org/IRemoteOnlineService/GetExistGroupNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetExistGroupNameAsync(Remote.Infrastructure.DataContracts.ClientToken whoIam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/TryConnectToAnotherClient", ReplyAction="http://tempuri.org/IRemoteOnlineService/TryConnectToAnotherClientResponse")]
        bool TryConnectToAnotherClient(Remote.Infrastructure.DataContracts.ClientToken target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/TryConnectToAnotherClient", ReplyAction="http://tempuri.org/IRemoteOnlineService/TryConnectToAnotherClientResponse")]
        System.Threading.Tasks.Task<bool> TryConnectToAnotherClientAsync(Remote.Infrastructure.DataContracts.ClientToken target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/BeginTranslateFile", ReplyAction="http://tempuri.org/IRemoteOnlineService/BeginTranslateFileResponse")]
        bool BeginTranslateFile(Remote.Infrastructure.DataContracts.ClientToken target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/BeginTranslateFile", ReplyAction="http://tempuri.org/IRemoteOnlineService/BeginTranslateFileResponse")]
        System.Threading.Tasks.Task<bool> BeginTranslateFileAsync(Remote.Infrastructure.DataContracts.ClientToken target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/UpdateFileData", ReplyAction="http://tempuri.org/IRemoteOnlineService/UpdateFileDataResponse")]
        Remote.Infrastructure.DataContracts.FileTransferResponsed UpdateFileData(int port, Remote.Infrastructure.DataContracts.FileTransferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/UpdateFileData", ReplyAction="http://tempuri.org/IRemoteOnlineService/UpdateFileDataResponse")]
        System.Threading.Tasks.Task<Remote.Infrastructure.DataContracts.FileTransferResponsed> UpdateFileDataAsync(int port, Remote.Infrastructure.DataContracts.FileTransferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/UpdateFileBlockData", ReplyAction="http://tempuri.org/IRemoteOnlineService/UpdateFileBlockDataResponse")]
        Remote.Infrastructure.DataContracts.BlockTransferResponsed UpdateFileBlockData(int port, Remote.Infrastructure.DataContracts.BlockTransferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/UpdateFileBlockData", ReplyAction="http://tempuri.org/IRemoteOnlineService/UpdateFileBlockDataResponse")]
        System.Threading.Tasks.Task<Remote.Infrastructure.DataContracts.BlockTransferResponsed> UpdateFileBlockDataAsync(int port, Remote.Infrastructure.DataContracts.BlockTransferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/EndTranslateFile", ReplyAction="http://tempuri.org/IRemoteOnlineService/EndTranslateFileResponse")]
        bool EndTranslateFile(Remote.Infrastructure.DataContracts.ClientToken target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/EndTranslateFile", ReplyAction="http://tempuri.org/IRemoteOnlineService/EndTranslateFileResponse")]
        System.Threading.Tasks.Task<bool> EndTranslateFileAsync(Remote.Infrastructure.DataContracts.ClientToken target);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteOnlineServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteOnlineService/ServerPushUserOnlineStateChanged")]
        void ServerPushUserOnlineStateChanged(Remote.Infrastructure.DataContracts.ClientToken newUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteOnlineService/ServerPushServiceClosingCall")]
        void ServerPushServiceClosingCall();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteOnlineService/ServerPushOpenUpdateService")]
        void ServerPushOpenUpdateService();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteOnlineService/ServerPushCloseUpdateService")]
        void ServerPushCloseUpdateService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/TransferFileData", ReplyAction="http://tempuri.org/IRemoteOnlineService/TransferFileDataResponse")]
        Remote.Infrastructure.DataContracts.FileTransferResponsed TransferFileData(Remote.Infrastructure.DataContracts.FileTransferRequest transferData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteOnlineService/TransferFileBlockMessage", ReplyAction="http://tempuri.org/IRemoteOnlineService/TransferFileBlockMessageResponse")]
        Remote.Infrastructure.DataContracts.BlockTransferResponsed TransferFileBlockMessage(Remote.Infrastructure.DataContracts.BlockTransferRequest blockMessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteOnlineServiceChannel : RemoteClient.Inferstructure.WCF.RemoteOnlineService.IRemoteOnlineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteOnlineServiceClient : System.ServiceModel.DuplexClientBase<RemoteClient.Inferstructure.WCF.RemoteOnlineService.IRemoteOnlineService>, RemoteClient.Inferstructure.WCF.RemoteOnlineService.IRemoteOnlineService {
        
        public RemoteOnlineServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RemoteOnlineServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RemoteOnlineServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteOnlineServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteOnlineServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Remote.Infrastructure.DataContracts.ClientToken> GetOnlineUsers(Remote.Infrastructure.DataContracts.ClientToken whoIam) {
            return base.Channel.GetOnlineUsers(whoIam);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Remote.Infrastructure.DataContracts.ClientToken>> GetOnlineUsersAsync(Remote.Infrastructure.DataContracts.ClientToken whoIam) {
            return base.Channel.GetOnlineUsersAsync(whoIam);
        }
        
        public void UpdateWhoIam(Remote.Infrastructure.DataContracts.ClientToken whoIam) {
            base.Channel.UpdateWhoIam(whoIam);
        }
        
        public System.Threading.Tasks.Task UpdateWhoIamAsync(Remote.Infrastructure.DataContracts.ClientToken whoIam) {
            return base.Channel.UpdateWhoIamAsync(whoIam);
        }
        
        public void UpdateTokenOnlineState(Remote.Infrastructure.DataContracts.ClientToken token) {
            base.Channel.UpdateTokenOnlineState(token);
        }
        
        public System.Threading.Tasks.Task UpdateTokenOnlineStateAsync(Remote.Infrastructure.DataContracts.ClientToken token) {
            return base.Channel.UpdateTokenOnlineStateAsync(token);
        }
        
        public System.Collections.Generic.List<string> GetExistGroupName(Remote.Infrastructure.DataContracts.ClientToken whoIam) {
            return base.Channel.GetExistGroupName(whoIam);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetExistGroupNameAsync(Remote.Infrastructure.DataContracts.ClientToken whoIam) {
            return base.Channel.GetExistGroupNameAsync(whoIam);
        }
        
        public bool TryConnectToAnotherClient(Remote.Infrastructure.DataContracts.ClientToken target) {
            return base.Channel.TryConnectToAnotherClient(target);
        }
        
        public System.Threading.Tasks.Task<bool> TryConnectToAnotherClientAsync(Remote.Infrastructure.DataContracts.ClientToken target) {
            return base.Channel.TryConnectToAnotherClientAsync(target);
        }
        
        public bool BeginTranslateFile(Remote.Infrastructure.DataContracts.ClientToken target) {
            return base.Channel.BeginTranslateFile(target);
        }
        
        public System.Threading.Tasks.Task<bool> BeginTranslateFileAsync(Remote.Infrastructure.DataContracts.ClientToken target) {
            return base.Channel.BeginTranslateFileAsync(target);
        }
        
        public Remote.Infrastructure.DataContracts.FileTransferResponsed UpdateFileData(int port, Remote.Infrastructure.DataContracts.FileTransferRequest request) {
            return base.Channel.UpdateFileData(port, request);
        }
        
        public System.Threading.Tasks.Task<Remote.Infrastructure.DataContracts.FileTransferResponsed> UpdateFileDataAsync(int port, Remote.Infrastructure.DataContracts.FileTransferRequest request) {
            return base.Channel.UpdateFileDataAsync(port, request);
        }
        
        public Remote.Infrastructure.DataContracts.BlockTransferResponsed UpdateFileBlockData(int port, Remote.Infrastructure.DataContracts.BlockTransferRequest request) {
            return base.Channel.UpdateFileBlockData(port, request);
        }
        
        public System.Threading.Tasks.Task<Remote.Infrastructure.DataContracts.BlockTransferResponsed> UpdateFileBlockDataAsync(int port, Remote.Infrastructure.DataContracts.BlockTransferRequest request) {
            return base.Channel.UpdateFileBlockDataAsync(port, request);
        }
        
        public bool EndTranslateFile(Remote.Infrastructure.DataContracts.ClientToken target) {
            return base.Channel.EndTranslateFile(target);
        }
        
        public System.Threading.Tasks.Task<bool> EndTranslateFileAsync(Remote.Infrastructure.DataContracts.ClientToken target) {
            return base.Channel.EndTranslateFileAsync(target);
        }
    }
}
